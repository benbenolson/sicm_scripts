#include <getopt.h>
#include <string.h>
#include <ctype.h>
#include "parse_gnu_time.h"

typedef struct metrics {
  /* Peak RSS */
  size_t peak_rss_kbytes,
         sites_peak_rss,
         sites_peak_extent_size,
         sites_peak_alloc_size;
  double peak_rss; /* In GB */

  /* Numastat */
  size_t num_mem_nodes;
  unsigned long *memfree;

  /* PCM Memory */
  size_t num_cpu_nodes; /* PCM Memory only shows sockets */
  double **bandwidth; /* 2d: node and intervals */
  double *avg_bandwidth; /* 1d: node */
  double *peak_bandwidth; /* 1d: node */

  /* All benchmarks */
  size_t runtime_seconds;

  /* SICM output */
  double interval_time_over;

  fom_metrics *fom;
} metrics;

metrics *init_metrics() {
  metrics *info;
  info = malloc(sizeof(metrics));

  /* Peak RSS */
  info->peak_rss_kbytes = 0;
  info->sites_peak_rss = 0;
  info->sites_peak_extent_size = 0;
  info->sites_peak_alloc_size = 0;
  info->peak_rss = 0.0;

  /* Numastat */
  info->num_mem_nodes = 0;
  info->memfree = NULL;

  /* PCM Memory */
  info->num_cpu_nodes = 0;
  info->bandwidth = NULL;
  info->avg_bandwidth = NULL;
  info->peak_bandwidth = NULL;

  /* All benchmarks */
  info->runtime_seconds = 0;

  /* SICM output */
  info->interval_time_over = 0.0;

  info->fom = init_fom_metrics();

  return info;
}

metrics *sh_parse_info(FILE *file) {
  char *line;
  size_t len;
  ssize_t read;
  metrics *info;

  info = sh_init_metrics();

  line = NULL;
  len = 0;
  while(read = getline(&line, &len, file) != -1) {
    if(parse_gnu_time(line, info)) continue;
    if(parse_numastat(line, info)) continue;
    if(parse_fom(line, info)) continue;
    if(parse_pcm_memory(line, info)) continue;
    if(parse_sicm(line, info)) continue;
  }

  free(line);
  return info;
}

/* Modifies the filename to be correct for the metric */
void find_file(char **filename, char *metric) {

  if(strncmp(metric, "memfree", 7) == 0) {
    *filename = malloc(sizeof(char) * 13);
    strcpy(*filename, "numastat.txt");
  } else {
    *filename = malloc(sizeof(char) * 11);
    strcpy(*filename, "stdout.txt");
  }

  return;
}
